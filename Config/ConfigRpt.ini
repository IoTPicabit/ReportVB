[SQLConnectionStringData]
Data Source=
[ENDCONFIG]


[SQLCommandStringData_dsTest]
use ✏️;

declare @timeBase integer

set @timeBase = 10

SELECT TOP (@timeBase) [Id]
      ,[Nombre]
      ,[Posicion]
  FROM [TablaTest]

[ENDCONFIG]


[SQLCommandStringData_dsAnalog]


use ✏️;

--declare       @timeBase integer

--declare       @fechaini datetime2

--declare       @fechafin datetime2

--declare       @tags nvarchar(max)

--set @fechaini = '2023-03-27 00:00:00'

--set @fechafin = '2023-03-31 23:59:59'

--set @tags = 'Test'

 

--set @timeBase = 3 --A 0, hace la media, mínimo y máximo de cada hora dentro del periodo. A 1, hace la media, mínimo y máximo de cada día dentro del periodo (quizás se use poco). A 2, se realizará hace la media, mínimo y máximo de cada día de una semana. A 3, se realizará hace la media, mínimo y máximo de cada día de un mes natural.

--select  @fechaini, @fechafin, @tags, @timeBase
--;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-->>>



IF @timeBase = 0

BEGIN

SELECT r.tagindex AS TagIndex,

       r.tagdescription AS TagDescription, r.TagUnit, CAST(DateAndTime as date) as Day,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS valAvg00,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS valMax00,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS valMin00,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS valAvg01,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS valMin01,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS valAvg02,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS valMin02,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS valAvg03,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS valMin03,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS valAvg04,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS valMin04,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS valAvg05,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS valMin05,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS valAvg06,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS valMax06,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS valMin06,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS valAvg07,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS valMax07,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS valMin07,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS valAvg08,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS valMax08,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS valMin08,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS valAvg09,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS valMax09,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS valMin09,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS valAvg10,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS valMax10,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS valMin10,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS valAvg11,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS valMax11,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS valMin11,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS valAvg12,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS valMax12,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS valMin12,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS valAvg13,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS valMax13,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS valMin13,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS valAvg14,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS valMax14,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS valMin14,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS valAvg15,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS valMax15,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS valMin15,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS valAvg16,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS valMax16,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS valMin16,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS valAvg17,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS valMax17,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS valMin17,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS valAvg18,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS valMax18,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS valMin18,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS valAvg19,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS valMax19,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS valMin19,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS valAvg20,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS valMax20,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS valMin20,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS valAvg21,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS valMax21,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS valMin21,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS valAvg22,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS valMax22,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS valMin22,

AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS valAvg23,

MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS valMax23,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS valMin23

FROM [AnaVinsFloatTable]

inner join AnaVinsReportTable as r on  [AnaVinsFloatTable].tagindex=r.tagindex

where [AnaVinsFloatTable].tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

      and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, r.TagUnit, CAST(DateAndTime as date)

order by CAST(DateAndTime as date)

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 1
BEGIN
    WITH CTE AS (
        SELECT
            t.tagindex AS TagIndex,
            t.tagdescription AS TagDescription,
            t.TagUnit,
            AVG(val) AS TOT_ValMed,
            MAX(val) AS TOT_ValMax,
            MIN(val) AS TOT_ValMin
        FROM [AnaVinsFloatTable] AS a
        INNER JOIN AnaVinsReportTable AS t ON a.tagindex = t.tagindex
        WHERE a.tagindex IN (SELECT value FROM STRING_SPLIT(@tags, ','))
            AND DateAndTime BETWEEN @fechaini AND @fechafin
            AND status NOT IN ('U', 'E')
            AND marker NOT IN ('E')
        GROUP BY t.tagindex, t.tagdescription, t.TagUnit
    )

    SELECT r.tagindex AS TagIndex,
           r.tagdescription AS TagDescription,
           r.TagUnit,
           CAST(DateAndTime AS DATE) AS Day,
           AVG(val) AS valAvg00,
           MAX(val) AS valMax00,
           MIN(val) AS valMin00,
           CTE.TOT_ValMed,
           CTE.TOT_ValMax,
           CTE.TOT_ValMin
    FROM [AnaVinsFloatTable] AS avft
    INNER JOIN CTE ON avft.tagindex = CTE.TagIndex
    INNER JOIN AnaVtotReportTable AS r ON CTE.tagindex = r.tagindex
    WHERE avft.tagindex IN (SELECT value FROM STRING_SPLIT(@tags, ','))
        AND DateAndTime BETWEEN @fechaini AND @fechafin
        AND status NOT IN ('U', 'E')
        AND marker NOT IN ('E')
	GROUP BY r.tagindex, r.tagdescription, r.TagUnit, CAST(DateAndTime AS DATE), CTE.TagIndex, CTE.TOT_ValMed, CTE.TOT_ValMax, CTE.TOT_ValMin
        ORDER BY CAST(DateAndTime AS DATE) , r.tagindex, CTE.TagIndex ;

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 2

BEGIN
DECLARE @Lunes DATE

-- Si @fechaini es un lunes, déjala como está
IF DATEPART(WEEKDAY, @fechaini) = 1 -- 2 representa el lunes
BEGIN
    set @Lunes = @fechaini 
	--select @Lunes AS 'EsLunes';
END
ELSE
BEGIN
	set @Lunes = DATEADD(DAY, -((DATEPART(WEEKDAY, @fechaini) + 6) % 7), @fechaini)
	--SELECT  @Lunes AS 'AhoraEsLunes';
END

SELECT r.tagindex AS TagIndex,

       r.tagdescription AS TagDescription, r.TagUnit,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = DATEPART(DAY, @Lunes) THEN val ELSE NULL END) AS valAvg00,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = DATEPART(DAY, @Lunes) THEN val ELSE NULL END) AS valMax00,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = DATEPART(DAY, @Lunes) THEN val ELSE NULL END) AS valMin00,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,1,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg01,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,1,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,1,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin01,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,2,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg02,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,2,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,2,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin02,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,3,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg03,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,3,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,3,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin03,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,4,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg04,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,4,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,4,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin04,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,5,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg05,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,5,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,5,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin05,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,6,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valAvg06,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,6,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMax06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = dateadd(d,6,DATEPART(DAY, @Lunes)) THEN val ELSE NULL END) AS valMin06

FROM [AnaVinsFloatTable]

inner join AnaVinsReportTable as r on  [AnaVinsFloatTable].tagindex=r.tagindex

where [AnaVinsFloatTable].tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND dateandtime between @Lunes and dateadd(d,6,dateandtime)

	AND DATEPART(MONTH, dateandtime) =  DATEPART(MONTH,@fechaini) AND DATEPART(YEAR, dateandtime) =  DATEPART(YEAR,@fechaini) --<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

           and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, r.TagUnit

ORDER BY TagIndex

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 3

BEGIN

SELECT r.tagindex AS TagIndex,

       r.tagdescription AS TagDescription, 
	   r.TagUnit, 

NULL AS valAvg00,

NULL AS valMax00,

NULL AS valMin00,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS valAvg01,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS valMin01,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS valAvg02,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS valMin02,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS valAvg03,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS valMin03,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS valAvg04,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS valMin04,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS valAvg05,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS valMin05,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS valAvg06,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS valMax06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS valMin06,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS valAvg07,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS valMax07,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS valMin07,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS valAvg08,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS valMax08,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS valMin08,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS valAvg09,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS valMax09,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS valMin09,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS valAvg10,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS valMax10,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS valMin10,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS valAvg11,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS valMax11,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS valMin11,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS valAvg12,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS valMax12,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS valMin12,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS valAvg13,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS valMax13,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS valMin13,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS valAvg14,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS valMax14,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS valMin14,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS valAvg15,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS valMax15,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS valMin15,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS valAvg16,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS valMax16,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS valMin16,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS valAvg17,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS valMax17,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS valMin17,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS valAvg18,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS valMax18,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS valMin18,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS valAvg19,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS valMax19,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS valMin19,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS valAvg20,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS valMax20,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS valMin20,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS valAvg21,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS valMax21,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS valMin21,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS valAvg22,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS valMax22,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS valMin22,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS valAvg23,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS valMax23,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS valMin23,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS valAvg24,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS valMax24,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS valMin24,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS valAvg25,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS valMax25,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS valMin25,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS valAvg26,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS valMax26,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS valMin26,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS valAvg27,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS valMax27,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS valMin27,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS valAvg28,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS valMax28,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS valMin28,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS valAvg29,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS valMax29,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS valMin29,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS valAvg30,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS valMax30,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS valMin30,

AVG(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS valAvg31,

MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS valMax31,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS valMin31

FROM [AnaVinsFloatTable]

inner join AnaVinsReportTable as r on  [AnaVinsFloatTable].tagindex=r.tagindex

where [AnaVinsFloatTable].tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DATEPART(MONTH, dateandtime) =  DATEPART(MONTH,@fechaini) AND DATEPART(YEAR, dateandtime) =  DATEPART(YEAR,@fechaini)

           and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, r.TagUnit

ORDER BY TagIndex

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


IF @timeBase = 4

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        AnaVtotFloatTable t1

        , AnaVtotFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        --and t1.tagindex=0

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))

        --AND t2.DateAndTime <= DATEADD(HOUR,1,t1.DateAndTime)

)

SELECT r.tagindex AS TagIndexT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, r.TagUnit as TagUnitT, CAST(DateAndTime as date) as DayT,  

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS TOT_Ini00,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif00,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN nextVal ELSE NULL END) AS TOT_Fin00,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini01,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini02,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif02,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini03,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif03,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini04,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif04,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini05,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif05,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini06,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif06,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin06,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini07,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif07,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin07,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS TOT_Ini08,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif08,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN nextVal ELSE NULL END) AS TOT_Fin08,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS TOT_Ini09,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif09,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN nextVal ELSE NULL END) AS TOT_Fin09,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS TOT_Ini10,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif10,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN nextVal ELSE NULL END) AS TOT_Fin10,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS TOT_Ini11,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif11,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN nextVal ELSE NULL END) AS TOT_Fin11,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS TOT_Ini12,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif12,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN nextVal ELSE NULL END) AS TOT_Fin12,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS TOT_Ini13,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif13,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN nextVal ELSE NULL END) AS TOT_Fin13,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS TOT_Ini14,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif14,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN nextVal ELSE NULL END) AS TOT_Fin14,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS TOT_Ini15,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif15,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN nextVal ELSE NULL END) AS TOT_Fin15,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS TOT_Ini16,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif16,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN nextVal ELSE NULL END) AS TOT_Fin16,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS TOT_Ini17,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif17,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN nextVal ELSE NULL END) AS TOT_Fin17,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS TOT_Ini18,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif18,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN nextVal ELSE NULL END) AS TOT_Fin18,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS TOT_Ini19,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif19,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN nextVal ELSE NULL END) AS TOT_Fin19,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS TOT_Ini20,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif20,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN nextVal ELSE NULL END) AS TOT_Fin20,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS TOT_Ini21,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif21,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN nextVal ELSE NULL END) AS TOT_Fin21,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS TOT_Ini22,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif22,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN nextVal ELSE NULL END) AS TOT_Fin22,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS TOT_Ini23,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif23,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin23

FROM  CTE
inner join AnaVtotReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, r.TagUnit, CAST(DateAndTime as date), r.TagName

order by CAST(DateAndTime as date)

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


IF @timeBase = 5
BEGIN
WITH CTE AS (

    SELECT
        t1.*,
        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc
        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc
        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal
        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM
        AnaVtotFloatTable t1
        , AnaVtotFloatTable t2     

    WHERE
        t1.DateAndTime BETWEEN @fechaini AND @fechafin
        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    
        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    
        and t1.tagindex=t2.tagindex        
        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))

						GROUP BY t1.tagindex
						,t2.tagindex
						,t1.DateAndTime
						,t2.DateAndTime
						,t1.Millitm
						,t1.VAL
						,t2.VAL
						,t1.Status
						,t1.Marker
				
)
    
				SELECT DISTINCT
					r.tagindex AS TagIndexT,
					REPLACE(SUBSTRING(r.[TagName], 1, CHARINDEX('.', r.[TagName])), '.', '') AS TagOnlyNameT,
					r.tagdescription AS TagDescriptionT,
					r.TagUnit AS TagUnitT,
					CAST(DateAndTime AS DATE) AS DayT,

					MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex) AS TOT_Ini,

					((MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END)OVER (PARTITION BY r.tagindex)) - (MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END)OVER (PARTITION BY r.tagindex))) AS TOT_Dif,
		
					MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END)  OVER (PARTITION BY r.tagindex) AS TOT_Fin 

					,MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex) AS TOT_TOT_Ini
							
					,((MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END) OVER (PARTITION BY r.tagindex)) - (MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex))) AS TOT_TOT_Dif

					,MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END) OVER (PARTITION BY r.tagindex) AS TOT_TOT_Fin
    
	FROM  CTE
inner join AnaVtotReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))
    AND DateAndTime BETWEEN @fechaini and @fechafin
    and status not in('U', 'E') and marker not in ('E')

GROUP BY  r.tagindex, r.tagdescription, r.TagUnit, CAST(DateAndTime as date), r.TagName
,CTE.DateAndTime
,CTE.Val
,CTE.nextVal


order by CAST(DateAndTime as date), r.tagindex

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


IF @timeBase = 6

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        AnaVtotFloatTable t1

        , AnaVtotFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndexT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, r.TagUnit AS TagUnitT,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini01,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini02,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif02,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini03,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif03,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini04,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif04,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini05,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif05,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini06,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif06,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini07,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif07,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin07,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS TOT_Ini08,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif08,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END) AS TOT_Fin08,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS TOT_Ini09,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif09,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END) AS TOT_Fin09,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS TOT_Ini10,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif10,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END) AS TOT_Fin10,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS TOT_Ini11,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif11,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END) AS TOT_Fin11,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS TOT_Ini12,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif12,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END) AS TOT_Fin12,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS TOT_Ini13,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif13,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END) AS TOT_Fin13,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS TOT_Ini14,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif14,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END) AS TOT_Fin14,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS TOT_Ini15,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif15,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END) AS TOT_Fin15,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS TOT_Ini16,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif16,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END) AS TOT_Fin16,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS TOT_Ini17,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif17,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END) AS TOT_Fin17,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS TOT_Ini18,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif18,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END) AS TOT_Fin18,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS TOT_Ini19,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif19,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END) AS TOT_Fin19,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS TOT_Ini20,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif20,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END) AS TOT_Fin20,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS TOT_Ini21,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif21,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN nextVal ELSE NULL END) AS TOT_Fin21,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS TOT_Ini22,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif22,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END) AS TOT_Fin22,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS TOT_Ini23,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif23,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin23,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS TOT_Ini24,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif24,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END) AS TOT_Fin24,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS TOT_Ini25,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif25,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END) AS TOT_Fin25,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS TOT_Ini26,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif26,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END) AS TOT_Fin26,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS TOT_Ini27,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif27,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END) AS TOT_Fin27,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS TOT_Ini28,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif28,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END) AS TOT_Fin28,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS TOT_Ini29,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif29,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END) AS TOT_Fin29,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS TOT_Ini30,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif30,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END) AS TOT_Fin30,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS TOT_Ini31,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif31,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END) AS TOT_Fin31

FROM  CTE
inner join AnaVtotReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName
, r.TagUnit

END;


--<<< 
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

[ENDCONFIG]



































































































[SQLCommandStringData_dsDigital]

use ✏️;

--declare       @timeBase integer

--declare       @fechaini datetime2

--declare       @fechafin datetime2

--declare       @tags nvarchar(max)

--set @fechaini = '2023-03-27 00:00:00'

--set @fechafin = '2023-03-31 23:59:59'

--set @tags = 'Test'

 

--set @timeBase = 3 --A 0, hace la media, mínimo y máximo de cada hora dentro del periodo. A 1, hace la media, mínimo y máximo de cada día dentro del periodo (quizás se use poco). A 2, se realizará hace la media, mínimo y máximo de cada día de una semana. A 3, se realizará hace la media, mínimo y máximo de cada día de un mes natural.

--select  @fechaini, @fechafin, @tags, @timeBase
--;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-->>>

IF @timeBase = 100 --OLD 4 Mod a totales

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        [DigNmanTAutFloatTable] t1

        , [DigNmanTAutFloatTable] t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        --and t1.tagindex=0

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))

        --AND t2.DateAndTime <= DATEADD(HOUR,1,t1.DateAndTime)

)

SELECT r.tagindex AS TagIndex, r.[TagName] As TagName,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyName,
       r.tagdescription AS TagDescription, CAST(DateAndTime as date) as Day,  

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS valMin00,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN (nextVal-val) ELSE NULL END) AS valAvg00,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN nextVal ELSE NULL END) AS valMax00,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS valMin01,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN (nextVal-val) ELSE NULL END) AS valAvg01,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN nextVal ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS valMin02,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN (nextVal-val) ELSE NULL END) AS valAvg02,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN nextVal ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS valMin03,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN (nextVal-val) ELSE NULL END) AS valAvg03,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN nextVal ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS valMin04,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN (nextVal-val) ELSE NULL END) AS valAvg04,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN nextVal ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS valMin05,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN (nextVal-val) ELSE NULL END) AS valAvg05,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN nextVal ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS valMin06,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN (nextVal-val) ELSE NULL END) AS valAvg06,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN nextVal ELSE NULL END) AS valMax06,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS valMin07,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN (nextVal-val) ELSE NULL END) AS valAvg07,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN nextVal ELSE NULL END) AS valMax07,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS valMin08,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN (nextVal-val) ELSE NULL END) AS valAvg08,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN nextVal ELSE NULL END) AS valMax08,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS valMin09,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN (nextVal-val) ELSE NULL END) AS valAvg09,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN nextVal ELSE NULL END) AS valMax09,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS valMin10,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN (nextVal-val) ELSE NULL END) AS valAvg10,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN nextVal ELSE NULL END) AS valMax10,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS valMin11,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN (nextVal-val) ELSE NULL END) AS valAvg11,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN nextVal ELSE NULL END) AS valMax11,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS valMin12,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN (nextVal-val) ELSE NULL END) AS valAvg12,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN nextVal ELSE NULL END) AS valMax12,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS valMin13,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN (nextVal-val) ELSE NULL END) AS valAvg13,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN nextVal ELSE NULL END) AS valMax13,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS valMin14,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN (nextVal-val) ELSE NULL END) AS valAvg14,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN nextVal ELSE NULL END) AS valMax14,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS valMin15,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN (nextVal-val) ELSE NULL END) AS valAvg15,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN nextVal ELSE NULL END) AS valMax15,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS valMin16,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN (nextVal-val) ELSE NULL END) AS valAvg16,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN nextVal ELSE NULL END) AS valMax16,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS valMin17,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN (nextVal-val) ELSE NULL END) AS valAvg17,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN nextVal ELSE NULL END) AS valMax17,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS valMin18,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN (nextVal-val) ELSE NULL END) AS valAvg18,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN nextVal ELSE NULL END) AS valMax18,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS valMin19,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN (nextVal-val) ELSE NULL END) AS valAvg19,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN nextVal ELSE NULL END) AS valMax19,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS valMin20,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN (nextVal-val) ELSE NULL END) AS valAvg20,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN nextVal ELSE NULL END) AS valMax20,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS valMin21,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN (nextVal-val) ELSE NULL END) AS valAvg21,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN nextVal ELSE NULL END) AS valMax21,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS valMin22,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN (nextVal-val) ELSE NULL END) AS valAvg22,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN nextVal ELSE NULL END) AS valMax22,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS valMin23,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN (nextVal-val) ELSE NULL END) AS valAvg23,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN nextVal ELSE NULL END) AS valMax23

FROM  CTE
inner join DigNmanTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, CAST(DateAndTime as date), r.TagName

order by  CAST(DateAndTime as date), r.tagindex

END;




-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 101
BEGIN
WITH CTE AS (

    SELECT
        t1.*,
        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc
        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc
        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal
        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM
        DigNmanTAutFloatTable t1
        , DigNmanTAutFloatTable t2     

    WHERE
        t1.DateAndTime BETWEEN @fechaini AND @fechafin
        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    
        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    
        and t1.tagindex=t2.tagindex        
        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))

						GROUP BY t1.tagindex
						,t2.tagindex
						,t1.DateAndTime
						,t2.DateAndTime
						,t1.Millitm
						,t1.VAL
						,t2.VAL
						,t1.Status
						,t1.Marker
				
)
    
				SELECT DISTINCT
					r.tagindex AS TagIndex, r.tagName AS TagName,
					REPLACE(SUBSTRING(r.[TagName], 1, CHARINDEX('.', r.[TagName])), '.', '') AS TagOnlyName,
					r.tagdescription AS TagDescription,
					CAST(DateAndTime AS DATE) AS Day,

					MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex) AS valMin00,

					((MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END)OVER (PARTITION BY r.tagindex)) - (MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END)OVER (PARTITION BY r.tagindex))) AS valAvg00,
		
					MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END)  OVER (PARTITION BY r.tagindex) AS valMax00 

					,MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex) AS TOT_ValMin
							
					,((MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END) OVER (PARTITION BY r.tagindex)) - (MIN(CASE WHEN DATEPART(HOUR, DateAndTime) = 0 THEN val ELSE NULL END) OVER (PARTITION BY r.tagindex))) AS TOT_ValMed

					,MAX(CASE WHEN DATEPART(HOUR, DateAndTime) = 23 THEN nextVal ELSE NULL END) OVER (PARTITION BY r.tagindex) AS TOT_ValMax
    
	FROM  CTE
inner join DigNmanTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))
    AND DateAndTime BETWEEN @fechaini and @fechafin
    and status not in('U', 'E') and marker not in ('E')

GROUP BY  r.tagindex, r.tagdescription, CAST(DateAndTime as date), r.TagName
,CTE.DateAndTime
,CTE.Val
,CTE.nextVal


order by CAST(DateAndTime as date), r.tagindex

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 102

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigNmanTAutFloatTable t1

        , DigNmanTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndex, r.[TagName] As TagName,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyName,
       r.tagdescription AS TagDescription, 

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN val ELSE NULL END) AS valMin00,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN val ELSE NULL END)) AS valAvg00,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS valMax00,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN val ELSE NULL END) AS valMin01,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN val ELSE NULL END)) AS valAvg01,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN val ELSE NULL END) AS valMin02,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN val ELSE NULL END)) AS valAvg02,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN val ELSE NULL END) AS valMin03,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN val ELSE NULL END)) AS valAvg03,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN val ELSE NULL END) AS valMin04,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN val ELSE NULL END)) AS valAvg04,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN val ELSE NULL END) AS valMin05,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN val ELSE NULL END)) AS valAvg05,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN val ELSE NULL END) AS valMin06,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN val ELSE NULL END)) AS valAvg06,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS valMax06

FROM  CTE
inner join DigNmanTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName

order by   r.tagindex

END;


-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

IF @timeBase = 103

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigNmanTAutFloatTable t1

        , DigNmanTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndex,  r.[TagName] As TagName,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyName,
       r.tagdescription AS TagDescription, 

--NULL AS valAvg00,
--NULL AS valMax00,
--NULL AS valMin00,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS valMin01,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END))) AS valAvg01,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS valMax01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS valMin02,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END)))  AS valAvg02,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS valMax02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS valMin03,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END)))  AS valAvg03,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS valMax03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS valMin04,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END)))  AS valAvg04,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS valMax04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS valMin05,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END)))  AS valAvg05,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS valMax05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS valMin06,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END)))  AS valAvg06,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS valMax06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS valMin07,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END)))  AS valAvg07,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS valMax07,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS valMin08,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END)))  AS valAvg08,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END) AS valMax08,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS valMin09,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END)))  AS valAvg09,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END) AS valMax09,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS valMin10,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END)))  AS valAvg10,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END) AS valMax10,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS valMin11,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END)))  AS valAvg11,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END) AS valMax11,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS valMin12,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END)))  AS valAvg12,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END) AS valMax12,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS valMin13,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END)))  AS valAvg13,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END) AS valMax13,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS valMin14,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END)))  AS valAvg14,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END) AS valMax14,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS valMin15,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END)))  AS valAvg15,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END) AS valMax15,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS valMin16,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END)))  AS valAvg16,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END) AS valMax16,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS valMin17,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END)))  AS valAvg17,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END) AS valMax17,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS valMin18,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END)))  AS valAvg18,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END) AS valMax18,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS valMin19,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END)))  AS valAvg19,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END) AS valMax19,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS valMin20,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END)))  AS valAvg20,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END) AS valMax20,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS valMin21,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END)))  AS valAvg21,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN nextVal ELSE NULL END) AS valMax21,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS valMin22,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END)))  AS valAvg22,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END) AS valMax22,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS valMin23,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END)))  AS valAvg23,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END) AS valMax23,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS valMin24,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END)))  AS valAvg24,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END) AS valMax24,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS valMin25,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END)))  AS valAvg25,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END) AS valMax25,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS valMin26,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END)))  AS valAvg26,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END) AS valMax26,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS valMin27,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END)))  AS valAvg27,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END) AS valMax27,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS valMin28,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END)))  AS valAvg28,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END) AS valMax28,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS valMin29,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END)))  AS valAvg29,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END) AS valMax29,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS valMin30,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END)))  AS valAvg30,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END) AS valMax30,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS valMin31,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END)))  AS valAvg31,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END) AS valMax31

FROM  CTE
inner join DigNmanTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName

END;


-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

IF @timeBase = 104 --OLD 4

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigTfunTAutFloatTable t1

        , DigTfunTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        --and t1.tagindex=0

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))

        --AND t2.DateAndTime <= DATEADD(HOUR,1,t1.DateAndTime)

)

SELECT r.tagindex AS TagIndexT, r.[TagName] As TagNameT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, CAST(DateAndTime as date) as DayT,  

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS TOT_Ini00,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif00,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN nextVal ELSE NULL END) AS TOT_Fin00,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini01,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini02,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif02,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini03,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif03,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini04,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif04,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini05,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif05,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini06,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif06,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin06,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini07,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif07,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin07,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN val ELSE NULL END) AS TOT_Ini08,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif08,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 8 THEN nextVal ELSE NULL END) AS TOT_Fin08,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN val ELSE NULL END) AS TOT_Ini09,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif09,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 9 THEN nextVal ELSE NULL END) AS TOT_Fin09,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN val ELSE NULL END) AS TOT_Ini10,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif10,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 10 THEN nextVal ELSE NULL END) AS TOT_Fin10,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN val ELSE NULL END) AS TOT_Ini11,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif11,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 11 THEN nextVal ELSE NULL END) AS TOT_Fin11,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN val ELSE NULL END) AS TOT_Ini12,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif12,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 12 THEN nextVal ELSE NULL END) AS TOT_Fin12,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN val ELSE NULL END) AS TOT_Ini13,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif13,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 13 THEN nextVal ELSE NULL END) AS TOT_Fin13,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN val ELSE NULL END) AS TOT_Ini14,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif14,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 14 THEN nextVal ELSE NULL END) AS TOT_Fin14,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN val ELSE NULL END) AS TOT_Ini15,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif15,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 15 THEN nextVal ELSE NULL END) AS TOT_Fin15,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN val ELSE NULL END) AS TOT_Ini16,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif16,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 16 THEN nextVal ELSE NULL END) AS TOT_Fin16,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN val ELSE NULL END) AS TOT_Ini17,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif17,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 17 THEN nextVal ELSE NULL END) AS TOT_Fin17,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN val ELSE NULL END) AS TOT_Ini18,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif18,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 18 THEN nextVal ELSE NULL END) AS TOT_Fin18,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN val ELSE NULL END) AS TOT_Ini19,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif19,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 19 THEN nextVal ELSE NULL END) AS TOT_Fin19,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN val ELSE NULL END) AS TOT_Ini20,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif20,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 20 THEN nextVal ELSE NULL END) AS TOT_Fin20,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN val ELSE NULL END) AS TOT_Ini21,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif21,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 21 THEN nextVal ELSE NULL END) AS TOT_Fin21,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN val ELSE NULL END) AS TOT_Ini22,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif22,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 22 THEN nextVal ELSE NULL END) AS TOT_Fin22,

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN val ELSE NULL END) AS TOT_Ini23,
AVG(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif23,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin23

FROM  CTE
inner join DigTfunTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, CAST(DateAndTime as date), r.TagName

--order by CAST(DateAndTime as date)
order by  CAST(DateAndTime as date), r.tagindex

END;


-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


IF @timeBase = 105 -->> Viene de 4 o 104

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        [DigTfunTAutFloatTable] t1

        , [DigTfunTAutFloatTable] t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        --and t1.tagindex=0

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndexT, r.[TagName] As TagNameT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, CAST(DateAndTime as date) as DayT,  

MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END) AS TOT_Ini,
(MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(HOUR, dateandtime) = 0 THEN val ELSE NULL END)) AS TOT_Dif,
MAX(CASE WHEN DATEPART(HOUR, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin




FROM  CTE
inner join DigTfunTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex, r.tagdescription, CAST(DateAndTime as date), r.TagName

order by  CAST(DateAndTime as date), r.tagindex

END;

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


IF @timeBase = 106

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigTfunTAutFloatTable t1

        , DigTfunTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndexT, r.[TagName] As TagNameT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, 

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini00,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN val ELSE NULL END)) AS TOT_Dif00,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin00,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini01,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN val ELSE NULL END)) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini02,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN val ELSE NULL END)) AS TOT_Dif02,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini03,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN val ELSE NULL END)) AS TOT_Dif03,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini04,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN val ELSE NULL END)) AS TOT_Dif04,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini05,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN val ELSE NULL END)) AS TOT_Dif05,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini06,
(MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN nextVal ELSE NULL END) - MIN(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN val ELSE NULL END)) AS TOT_Dif06,
MAX(CASE WHEN DATEPART(WEEKDAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin06

FROM  CTE
inner join DigTfunTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName

order by   r.tagindex

END;


-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

IF @timeBase = 6

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigTfunTAutFloatTable t1

        , DigTfunTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndexT,  r.[TagName] As TagNameT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, 

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini01,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini02,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif02,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini03,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif03,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini04,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif04,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini05,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif05,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini06,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif06,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini07,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif07,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin07,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS TOT_Ini08,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif08,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END) AS TOT_Fin08,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS TOT_Ini09,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif09,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END) AS TOT_Fin09,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS TOT_Ini10,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif10,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END) AS TOT_Fin10,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS TOT_Ini11,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif11,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END) AS TOT_Fin11,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS TOT_Ini12,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif12,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END) AS TOT_Fin12,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS TOT_Ini13,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif13,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END) AS TOT_Fin13,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS TOT_Ini14,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif14,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END) AS TOT_Fin14,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS TOT_Ini15,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif15,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END) AS TOT_Fin15,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS TOT_Ini16,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif16,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END) AS TOT_Fin16,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS TOT_Ini17,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif17,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END) AS TOT_Fin17,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS TOT_Ini18,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif18,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END) AS TOT_Fin18,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS TOT_Ini19,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif19,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END) AS TOT_Fin19,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS TOT_Ini20,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif20,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END) AS TOT_Fin20,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS TOT_Ini21,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif21,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN nextVal ELSE NULL END) AS TOT_Fin21,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS TOT_Ini22,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif22,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END) AS TOT_Fin22,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS TOT_Ini23,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif23,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin23,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS TOT_Ini24,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif24,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END) AS TOT_Fin24,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS TOT_Ini25,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif25,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END) AS TOT_Fin25,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS TOT_Ini26,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif26,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END) AS TOT_Fin26,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS TOT_Ini27,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif27,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END) AS TOT_Fin27,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS TOT_Ini28,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif28,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END) AS TOT_Fin28,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS TOT_Ini29,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif29,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END) AS TOT_Fin29,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS TOT_Ini30,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif30,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END) AS TOT_Fin30,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS TOT_Ini31,
AVG(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN (nextVal-val) ELSE NULL END) AS TOT_Dif31,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END) AS TOT_Fin31

FROM  CTE
inner join DigTfunTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName

END;


-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

IF @timeBase = 107

BEGIN
 
WITH CTE AS (

    SELECT

        t1.*,

        ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime) AS RowNumAsc

        ,ROW_NUMBER() OVER (PARTITION BY t1.TagIndex, DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0) ORDER BY t1.DateAndTime DESC) AS RowNumDesc

        ,FIRST_VALUE(t2.VAL) OVER (PARTITION BY t2.tagindex, DATEADD(HOUR,0,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0)) ORDER BY t2.DateAndTime ASC) AS nextVal

        ,DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) as timestampT2

    FROM

        DigTfunTAutFloatTable t1

        , DigTfunTAutFloatTable t2     

    WHERE

        t1.DateAndTime BETWEEN @fechaini AND @fechafin

        and t1.status not in('U', 'E') and t1.marker not in ('E','B')    

        and t2.status not in('U', 'E') and t2.marker not in ('E','B')    

        and t1.tagindex=t2.tagindex        

        AND DATEADD(HOUR, DATEDIFF(HOUR, 0, t2.DateAndTime), 0) = DATEADD(HOUR,1,DATEADD(HOUR, DATEDIFF(HOUR, 0, t1.DateAndTime), 0))
)

SELECT r.tagindex AS TagIndexT,  r.[TagName] As TagNameT,
       
	   REPLACE(SUBSTRING(r.[TagName], 1, charindex('.',r.[TagName] )), '.', '') TagOnlyNameT,
       r.tagdescription AS TagDescriptionT, 

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END) AS TOT_Ini01,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN val ELSE NULL END))) AS TOT_Dif01,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END) AS TOT_Fin01,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END) AS TOT_Ini02,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN val ELSE NULL END)))  AS TOT_Dif02,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 2 THEN nextVal ELSE NULL END) AS TOT_Fin02,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END) AS TOT_Ini03,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN val ELSE NULL END)))  AS TOT_Dif03,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 3 THEN nextVal ELSE NULL END) AS TOT_Fin03,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END) AS TOT_Ini04,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN val ELSE NULL END)))  AS TOT_Dif04,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 4 THEN nextVal ELSE NULL END) AS TOT_Fin04,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END) AS TOT_Ini05,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN val ELSE NULL END)))  AS TOT_Dif05,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 5 THEN nextVal ELSE NULL END) AS TOT_Fin05,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END) AS TOT_Ini06,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN val ELSE NULL END)))  AS TOT_Dif06,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 6 THEN nextVal ELSE NULL END) AS TOT_Fin06,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END) AS TOT_Ini07,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN val ELSE NULL END)))  AS TOT_Dif07,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 7 THEN nextVal ELSE NULL END) AS TOT_Fin07,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END) AS TOT_Ini08,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN val ELSE NULL END)))  AS TOT_Dif08,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 8 THEN nextVal ELSE NULL END) AS TOT_Fin08,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END) AS TOT_Ini09,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN val ELSE NULL END)))  AS TOT_Dif09,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 9 THEN nextVal ELSE NULL END) AS TOT_Fin09,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END) AS TOT_Ini10,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN val ELSE NULL END)))  AS TOT_Dif10,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 10 THEN nextVal ELSE NULL END) AS TOT_Fin10,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END) AS TOT_Ini11,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN val ELSE NULL END)))  AS TOT_Dif11,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 11 THEN nextVal ELSE NULL END) AS TOT_Fin11,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END) AS TOT_Ini12,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN val ELSE NULL END)))  AS TOT_Dif12,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 12 THEN nextVal ELSE NULL END) AS TOT_Fin12,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END) AS TOT_Ini13,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN val ELSE NULL END)))  AS TOT_Dif13,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 13 THEN nextVal ELSE NULL END) AS TOT_Fin13,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END) AS TOT_Ini14,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN val ELSE NULL END)))  AS TOT_Dif14,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 14 THEN nextVal ELSE NULL END) AS TOT_Fin14,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END) AS TOT_Ini15,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN val ELSE NULL END)))  AS TOT_Dif15,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 15 THEN nextVal ELSE NULL END) AS TOT_Fin15,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END) AS TOT_Ini16,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN val ELSE NULL END)))  AS TOT_Dif16,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 16 THEN nextVal ELSE NULL END) AS TOT_Fin16,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END) AS TOT_Ini17,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN val ELSE NULL END)))  AS TOT_Dif17,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 17 THEN nextVal ELSE NULL END) AS TOT_Fin17,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END) AS TOT_Ini18,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN val ELSE NULL END)))  AS TOT_Dif18,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 18 THEN nextVal ELSE NULL END) AS TOT_Fin18,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END) AS TOT_Ini19,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN val ELSE NULL END)))  AS TOT_Dif19,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 19 THEN nextVal ELSE NULL END) AS TOT_Fin19,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END) AS TOT_Ini20,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN val ELSE NULL END)))  AS TOT_Dif20,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 20 THEN nextVal ELSE NULL END) AS TOT_Fin20,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END) AS TOT_Ini21,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 1 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN val ELSE NULL END)))  AS TOT_Dif21,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 21 THEN nextVal ELSE NULL END) AS TOT_Fin21,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END) AS TOT_Ini22,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN val ELSE NULL END)))  AS TOT_Dif22,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 22 THEN nextVal ELSE NULL END) AS TOT_Fin22,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END) AS TOT_Ini23,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN val ELSE NULL END)))  AS TOT_Dif23,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 23 THEN nextVal ELSE NULL END) AS TOT_Fin23,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END) AS TOT_Ini24,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN val ELSE NULL END)))  AS TOT_Dif24,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 24 THEN nextVal ELSE NULL END) AS TOT_Fin24,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END) AS TOT_Ini25,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN val ELSE NULL END)))  AS TOT_Dif25,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 25 THEN nextVal ELSE NULL END) AS TOT_Fin25,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END) AS TOT_Ini26,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN val ELSE NULL END)))  AS TOT_Dif26,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 26 THEN nextVal ELSE NULL END) AS TOT_Fin26,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END) AS TOT_Ini27,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN val ELSE NULL END)))  AS TOT_Dif27,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 27 THEN nextVal ELSE NULL END) AS TOT_Fin27,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END) AS TOT_Ini28,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN val ELSE NULL END)))  AS TOT_Dif28,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 28 THEN nextVal ELSE NULL END) AS TOT_Fin28,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END) AS TOT_Ini29,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN val ELSE NULL END)))  AS TOT_Dif29,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 29 THEN nextVal ELSE NULL END) AS TOT_Fin29,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END) AS TOT_Ini30,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN val ELSE NULL END)))  AS TOT_Dif30,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 30 THEN nextVal ELSE NULL END) AS TOT_Fin30,

MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END) AS TOT_Ini31,
((MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END))-(MIN(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN val ELSE NULL END)))  AS TOT_Dif31,
MAX(CASE WHEN DATEPART(DAY, dateandtime) = 31 THEN nextVal ELSE NULL END) AS TOT_Fin31

FROM  CTE
inner join DigTfunTAutReportTable as r on  CTE.tagindex=r.tagindex

where CTE.tagindex in (select * from STRING_SPLIT(@tags, ','))

    AND DateAndTime BETWEEN @fechaini and @fechafin

    and status not in('U', 'E') and marker not in ('E')

GROUP BY r.tagindex
, r.tagdescription
, r.TagName

END;

--<<< 
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


[ENDCONFIG]

[ExportPath]
C:\Informes\
[ENDCONFIG]

[DebugLog]
1
[ENDCONFIG]

[PrintPageConfig]
<DeviceInfo><OutputFormat>EMF</OutputFormat><PageWidth>21cm</PageWidth><PageHeight>29.7cm</PageHeight><MarginTop>2cm</MarginTop><MarginLeft>2cm</MarginLeft><MarginRight>2cm</MarginRight><MarginBottom>2cm</MarginBottom></DeviceInfo>
[ENDCONFIG]